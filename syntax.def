RarityName:
    LName = ['List', 'of', 'Names']
    LName3 = Zip(LName1, LName2) (Combine to make tuples of elements. If one is already tuples will append to those)
    LName2 = Rotate(LName, N) (Rotate LName to the right N spaces with wrapping)
    LName4 = GetList(FName) (Get all the card entries from FName that are still available to be added)
    LName5 = Concat(LName, LName2)
    LName2 = [LName where Prop1(X1, X2) and (not NProp(X,...) or Prop2(X))] (Filter LName for members where Prop1 and
                                                                             either NProp does not or Prop2 holds. X is
                                                                             used as the variable name if LName is not a
                                                                             list of tuples. X1, X2,... are the
                                                                             variables for access to Tuple Elements
                                                                             otherwise)
    LName -> FName (Pull a random element from a list.
                    FileNames is the special list for all files in this rarity,
                    Any is the special list for all cards in this rarity that can still be added to packs)
    Tuple /> CName1, CName2,... (Split a tuple into its respective elements)
    FName = Following(FName, LName) (The next value in the list with wrapping)
    Colors = GetColors(CName) (The colors for a card extracted from a pack)
    Add(CName) (Add CName to the current pack)

    Repeat N {
        Commands...
    } (repeat Commands N times)

    ContainsAtLeast(LName, N) (There are at least N elements remaining in LName)
    ContainsAtLeast(LName, N) (There are exactly N elements remaining in LName)
    Intersects(LName, LName2) (There is at least 1 element in common between LName and LName2)
    Subset(LName, LName2) (Every element in  LName is in LName2)
    Or(Prop1, Prop2) (Ors the two propositions together. Can also be written Prop1 or Prop2)
    And(Prop1, Prop2) (Ands the two propositions together. Can also be written Prop1 and Prop2)
    Not(Prop) (Nots the proposition. Can also be written not Prop1)
    Id(Prop) (Returns the value of Prop)

/* Comments are C block style */
/* Comments must be on their own line. In-line is not supported */
/* Examples are available in pack.def, pool.def and superpool.def */
